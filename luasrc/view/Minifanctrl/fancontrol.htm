<%+header%>
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>风扇控制</title>
    <style>
        body {
            display: flex;
            flex-direction: column;
            align-items: center;
            justify-content: center;
            height: 100vh;
            margin: 0;
            background: #121212; 
            color: #ccc; 
            font-family: 'Arial', sans-serif;
            background: linear-gradient(45deg, #461b39,#2a4455, #1d3318, #461010, #4b4b4b, #36360c, #100e2b, #311e1e, #0b3612, #12414d, #3a3849);
            background-size: 400% 400%;
            animation: gradientBG 100s ease infinite;
        }

        @keyframes gradientBG {
        0% { background-position: 0% 50%; }
        50% { background-position: 100% 50%; }
        100% { background-position: 0% 50%; }
        }

        h2, h4 {
            text-align: center;
            width: 150%;
        }

        h2 {
            margin-bottom: 10px;
            color: #ffffff; 
            text-shadow: 1px 1px 2px rgba(0, 0, 0, 0.5); 
            background: #924864; 
            padding: 10px;
            border-radius: 10px;
        }

        h4 {
            margin-bottom: 20px;
            color: #ffffff; 
        }

        .button {
            background: #282c34;
            color: #ffffff;
            padding: 10px 20px;
            border: 2px solid #4CAF50;
            border-radius: 5px;
            font-size: 1em;
            cursor: pointer;
            transition: all 0.3s ease;
            width: 150px;
            margin: 10px;
            box-shadow: 0 5px 15px rgba(0, 255, 0, 0.6); 
        }

        .button:hover {
            background: #4CAF50; 
            color: #000; 
            box-shadow: 0 5px 15px rgba(255, 255, 255, 0.8); 
        }

        .button:active {
            transform: translateY(1px);
        }

        .container {
            display: flex;
            flex-direction: column;
            align-items: center;
            justify-content: center;
        }

        #fan {
            display: block;
            margin: 20px auto;
            border: 10px solid #4CAF50; 
            border-radius: 38%; 
        }

        #speedDisplay, #temperatureDisplay {
            text-align: center;
            font-size: 1.2em;
            margin-top: 10px;
        }

        #energyBar {
            width: 80%;
            max-width: 300px;
            height: 20px;
            border: 2px solid #4CAF50; 
            border-radius: 5px;
            overflow: hidden;
            margin-top: 20px;
            background: #333;
        }

        #energyFill {
            height: 100%;
            background: linear-gradient(to right, #00BFA5, #1DE9B6); 
            transition: width 0.5s ease;
        }

        .switch-container {
            display: none;
            align-items: center;
            justify-content: center;
            margin-top: 20px;
        }

        .switch-container.active {
            display: flex;
        }

        .switch-label {
            color: #fff;
            margin: 0 20px;
        }

        .switch {
            position: relative;
            width: 60px;
            height: 30px;
            background-color: #4CAF50;
            border-radius: 30px;
            cursor: pointer;
            transition: background-color 0.3s ease;
        }

        .switch:before {
            content: "";
            position: absolute;
            top: 3px;
            left: 3px;
            width: 24px;
            height: 24px;
            background-color: #fff;
            border-radius: 50%;
            transition: left 0.3s ease;
        }

        .switch.active:before {
            left: 33px;
        }

        .switch.active {
            background-color: #00BFA5;
        }
    </style>
</head>
<body>
    <div class="container">
        <h2>风扇控制</h2>
        <h4>温馨提示：请注意风扇处不要密封,会影响进出风向</h4>
        <div>
            <button class="button" onclick="fanstop()">狂躁模式</button>
            <button class="button" onclick="fanst1()">常规模式</button>
            <button class="button" onclick="fanst2()">低速模式</button>
            <button class="button" onclick="fanst3()">静音模式</button>
            <button class="button" onclick="fanst4()">智能模式</button>
        </div>
        <canvas id="fan" width="200" height="200"></canvas>
        <div id="speedDisplay">当前转速：0</div>
        <div id="temperatureDisplay">当前CPU温度：0</div>
        <div id="energyBar">
            <div id="energyFill"></div>
        </div>
        <div id="switchContainer" class="switch-container">
            <span class="switch-label">使用模组温度</span>
            <div class="switch" id="temperatureSwitch" onclick="toggleSwitch()"></div>
            <span class="switch-label">使用CPU温度</span>
        </div>
    </div>

    <script type="text/javascript">
        var tms
        var fanv
        let currentSpeed = 0;
        let currentTemperature = 0;
        const canvas = document.getElementById('fan');
        const ctx = canvas.getContext('2d');
        const energyFill = document.getElementById('energyFill');
        const switchContainer = document.getElementById('switchContainer');
        const temperatureSwitch = document.getElementById('temperatureSwitch');
        
        window.onload = function() {
            fanst();
            fansttp();
        };

        function updateFanAnimation(speed) {
            currentSpeed = speed;
            drawFan();
        }

        function drawFan() {
            ctx.clearRect(0, 0, canvas.width, canvas.height);
            const centerX = canvas.width / 2;
            const centerY = canvas.height / 2;
            const radius = 50;
            // 反转逻辑：数值越接近64，越红，越快；数值越接近255，越蓝，越慢。
            const colorValue = Math.floor((255 - currentSpeed) / 255 * 255);
            const color = `rgb(${colorValue}, 0, ${255 - colorValue})`;
            ctx.fillStyle = color;
            // 调整计算转速的因子
            const speedFactor = Math.floor((255 - currentSpeed) / 64); 
            const angle = (performance.now() / 100) * speedFactor; 
            for (let i = 0; i < 3; i++) {
                ctx.save();
                ctx.translate(centerX, centerY);
                ctx.rotate(angle + (i * (2 * Math.PI / 3)));
                ctx.fillRect(-15, -radius, 30, radius);
                ctx.restore();
            }
            
            requestAnimationFrame(drawFan);
        }


        function updateEnergyBar(temperature) {
            currentTemperature = temperature;
            const percentage = Math.min(Math.max(temperature / 100, 0), 1);
            energyFill.style.width = percentage * 100 + '%';
            
            const red = Math.min(255, Math.floor((temperature / 100) * 255));
            const green = 255 - red;
            const color = `rgb(${red}, ${green}, 0)`;
            energyFill.style.backgroundColor = color;

            document.getElementById('temperatureDisplay').innerText = `${fanv}：${temperature}℃`;
            tms=`：${temperature}℃`;
        }

        function fanstop() {
            var s = 'fanstop'; 
            var v = '1'; 
            XHR.get('<%=luci.dispatcher.build_url("admin", "fancontrol", "fanstop")%>', { set: s, p: v }, function(x, rv) {
                updateFanAnimation(0);
            });
            
            updateButtonStyles(0);
            switchContainer.classList.remove('active'); 
            fansttp();
        }
        
        function fanst1() {
            var s = 'fanst1'; 
            var v = '1'; 
            XHR.get('<%=luci.dispatcher.build_url("admin", "fancontrol", "fanst1")%>', { set: s, p: v }, function(x, rv) {
                updateFanAnimation(64);
            });
            
            updateButtonStyles(64);
            switchContainer.classList.remove('active'); 
            fansttp();

        }

        function fanst2() {
            var s = 'fanst2'; 
            var v = '1'; 
            XHR.get('<%=luci.dispatcher.build_url("admin", "fancontrol", "fanst2")%>', { set: s, p: v }, function(x, rv) {
                updateFanAnimation(128);
            });
            
            updateButtonStyles(128);
            switchContainer.classList.remove('active'); 
            fansttp();
        }

        function fanst3() {
            var s = 'fanst3'; 
            var v = '1'; 
            XHR.get('<%=luci.dispatcher.build_url("admin", "fancontrol", "fanst3")%>', { set: s, p: v }, function(x, rv) {
                updateFanAnimation(192);
            });
            
            updateButtonStyles(192);
            switchContainer.classList.remove('active'); 
            fansttp();
        }

        function fanst4() {
            var s = 'fanst4'; 
            var v = '1'; 
            XHR.get('<%=luci.dispatcher.build_url("admin", "fancontrol", "fanst4")%>', { set: s, p: v }, function(x, rv) {
                var pd = rv.fanspd;
            });
            fanst();
            fanst();
            fanst();
            fanst();
            updateButtonStyles(0);
            fanst(); 
            fansttp(); 
        }

        function fanst() {
            var s = 'fanst'; 
            var v = '1'; 
            XHR.get('<%=luci.dispatcher.build_url("admin", "fancontrol", "fanst")%>', { set: s, p: v }, function(x, rv) {
                var pd = parseInt(rv.fanspd, 10);
                var pd2 = rv.fancts;

                if (pd2 === "智能") {
                    updateButtonStyles(1);
                    switchContainer.classList.add('active'); 
                } else if (pd2 === "手动") {
                    updateButtonStyles(pd);
                    switchContainer.classList.remove('active'); 
                }

                updateFanAnimation(pd);
            });
        }

        function toggleSwitch() {
            if (temperatureSwitch.classList.contains('active')) {
                XHR.get('<%=luci.dispatcher.build_url("admin", "fancontrol", "fansvm")%>', { set: 's', p: 'v' }, function(x, rv) {
                    console.log('切换到模组温度');
                    fanst();
                    fansttp();
                });
            } else {
                XHR.get('<%=luci.dispatcher.build_url("admin", "fancontrol", "fansvc")%>', { set: 's', p: 'v' }, function(x, rv) {
                    console.log('切换到CPU温度');
                    fanst();
                    fansttp();
                });
            }
            temperatureSwitch.classList.toggle('active');
        }

        function updateButtonStyles(speed) {
            document.querySelectorAll('.button').forEach(button => {
                button.style.background = '#282c34'; 
                button.style.color = 'white';
                button.style.borderColor = '#4CAF50'; 
            });

            let buttonElement;
            switch (speed) {
                case 192:
                    buttonElement = document.querySelector('button[onclick="fanst3()"]');
                    document.getElementById('speedDisplay').innerText = `当前转速：1500RPM`;
                    break;
                case 128:
                    buttonElement = document.querySelector('button[onclick="fanst2()"]');
                    document.getElementById('speedDisplay').innerText = `当前转速：3000RPM`;
                    break;
                case 64:
                    buttonElement = document.querySelector('button[onclick="fanst1()"]');
                    document.getElementById('speedDisplay').innerText = `当前转速：4500RPM`;
                    break;
                case 0:
                    buttonElement = document.querySelector('button[onclick="fanstop()"]');
                    document.getElementById('speedDisplay').innerText = `当前转速：6000RPM`;
                    break;
                default:
                    buttonElement = document.querySelector('button[onclick="fanst4()"]');
                    document.getElementById('speedDisplay').innerText = `AUTO模式`;
                    break;
            }

            if (buttonElement) {
                buttonElement.style.background = '#1DE9B6'; 
                buttonElement.style.color = '#000'; 
            }
        }

        function fansttp() {
            var s = 'fanst'; 
            var v = '1'; 
            XHR.get('<%=luci.dispatcher.build_url("admin", "fancontrol", "fansttp")%>', { set: s, p: v }, function(x, rv) {
                var pd = rv.fansttp;
                fanv = rv.fansv;
                if (fanv === "模组温度") {
                    temperatureSwitch.classList.remove('active'); 
                } else {
                    temperatureSwitch.classList.add('active');
                }
                updateEnergyBar(pd);
            });
        }

        var timer = setInterval(function() {
            fanst();
            fansttp();
        }, 8000); 
    </script>
</body>
<%+footer%>
